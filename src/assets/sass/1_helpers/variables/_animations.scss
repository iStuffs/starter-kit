@charset 'UTF-8';
/**
* @description
* General animation properties for site consistencie
*
* @nuclide animation
* @section Helpers > Variables
*/

/**
* @description Default values of css transitions and animations
* @nuclide animation-duration
* @section Helpers > Variables
*/
$animation-duration: 0.5s !default;

/*
* Default variables for css transitions and animations
* @nuclide animation-easing
*/
$animation-easing: ease-in-out !default;

/// Map for default values of css transitions and animations
/// @type Map
/// @prop { * } all [$animation-duration $animation-easing] - Default value for css transition shorthand
/// @prop { Number } duration [$animation-duration] - Default value for css transition-duration or animation-duration
/// @prop { String } easing [$animation-easing] - Default value for animation-timing-function or transition-timing-function

$animations: (
    all: $animation-duration $animation-easing,
    duration: $animation-duration,
    easing: $animation-easing
) !default;

/**
* returns the value of the asked key for the `$animations` map
* @mixin animations
* @param $key ['all'] - map key to search
* @section Helpers > Variables
* @example
*   transition: animations('duration') animations('easing');:
*/

@function animations($key:'all'){
    @if type-of($animations) != map {
        @warn "There is no `$animations` map.";
    } @else if not map-has-key($animations, $key) {
        @warn "No animation/transition property found for `#{$key}` in `$animations` map.";
    } @else {
        @return map-get($animations, $key);
    }
    @return null;
}
